import 'package:equatable/equatable.dart';
import 'package:weather_app/domain_layer/domain_layer.dart';

///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class WeatherModelCityCoord extends WeatherEntityCityCoord with EquatableMixin {
  WeatherModelCityCoord({
    super.lat,
    super.lon,
  });
  WeatherModelCityCoord.fromJson(Map<String, dynamic> json) {
    super.lat = json['lat']?.toDouble();
    super.lon = json['lon']?.toDouble();
  }
  Map<String, dynamic> toJson() => super.toJson();
}

class WeatherModelCity extends WeatherEntityCity with EquatableMixin {
  WeatherModelCity({
    super.id,
    super.name,
    super.coord,
    super.country,
    super.population,
    super.timezone,
    super.sunrise,
    super.sunset,
  });
  WeatherModelCity.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    name = json['name']?.toString();
    coord = (json['coord'] != null)
        ? WeatherModelCityCoord.fromJson(json['coord'])
        : null;
    country = json['country']?.toString();
    population = json['population']?.toInt();
    timezone = json['timezone']?.toInt();
    sunrise = json['sunrise']?.toInt();
    sunset = json['sunset']?.toInt();
  }
  Map<String, dynamic> toJson() => super.toJson();
}

class WeatherModelListWind extends WeatherEntityListWind with EquatableMixin {
  WeatherModelListWind({
    super.speed,
    super.deg,
    super.gust,
  });
  WeatherModelListWind.fromJson(Map<String, dynamic> json) {
    speed = json['speed']?.toDouble();
    deg = json['deg']?.toInt();
    gust = json['gust']?.toDouble();
  }
  Map<String, dynamic> toJson() => super.toJson();
}

class WeatherModelListClouds extends WeatherEntityListClouds
    with EquatableMixin {
  WeatherModelListClouds({
    super.all,
  });
  WeatherModelListClouds.fromJson(Map<String, dynamic> json) {
    all = json['all']?.toInt();
  }
  Map<String, dynamic> toJson() => super.toJson();
}

class WeatherModelListWeather extends WeatherEntityListWeather
    with EquatableMixin {
  WeatherModelListWeather({
    super.id,
    super.main,
    super.description,
    super.icon,
  });
  WeatherModelListWeather.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    main = json['main']?.toString();
    description = json['description']?.toString();
    icon = json['icon']?.toString();
  }
  Map<String, dynamic> toJson() => super.toJson();
}

class WeatherModelListMain extends WeatherEntityListMain with EquatableMixin {
  WeatherModelListMain({
    super.temp,
    super.feelsLike,
    super.tempMin,
    super.tempMax,
    super.pressure,
    super.seaLevel,
    super.grndLevel,
    super.humidity,
    super.tempKf,
  });
  WeatherModelListMain.fromJson(Map<String, dynamic> json) {
    temp = json['temp']?.toDouble();
    feelsLike = json['feels_like']?.toDouble();
    tempMin = json['temp_min']?.toDouble();
    tempMax = json['temp_max']?.toDouble();
    pressure = json['pressure']?.toInt();
    seaLevel = json['sea_level']?.toInt();
    grndLevel = json['grnd_level']?.toInt();
    humidity = json['humidity']?.toInt();
    tempKf = json['temp_kf']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['temp'] = temp;
    data['feels_like'] = feelsLike;
    data['temp_min'] = tempMin;
    data['temp_max'] = tempMax;
    data['pressure'] = pressure;
    data['sea_level'] = seaLevel;
    data['grnd_level'] = grndLevel;
    data['humidity'] = humidity;
    data['temp_kf'] = tempKf;
    return data;
  }
}

class WeatherModelList extends WeatherEntityList with EquatableMixin {
  WeatherModelList({
    super.dt,
    super.main,
    super.weather,
    super.clouds,
    super.wind,
  });
  WeatherModelList.fromJson(Map<String, dynamic> json) {
    dt = json['dt']?.toInt();
    main = (json['main'] != null)
        ? WeatherModelListMain.fromJson(json['main'])
        : null;
    if (json['weather'] != null) {
      final v = json['weather'];
      final arr0 = <WeatherModelListWeather>[];
      v.forEach((v) {
        arr0.add(WeatherModelListWeather.fromJson(v));
      });
      weather = arr0;
    }
    clouds = (json['clouds'] != null)
        ? WeatherModelListClouds.fromJson(json['clouds'])
        : null;
    wind = (json['wind'] != null)
        ? WeatherModelListWind.fromJson(json['wind'])
        : null;
  }
  Map<String, dynamic> toJson() => super.toJson();
}

class WeatherEntityListModel extends WeatherEntityListEntity
    with EquatableMixin {
  WeatherEntityListModel({required super.weatherEntityList});

  factory WeatherEntityListModel.fromJson(Map<String, dynamic> json) {
    return WeatherEntityListModel(
        weatherEntityList: (json['list'] as List?)
            ?.map((dynamic e) =>
                WeatherEntityList.fromJson(e as Map<String, dynamic>))
            .toList());
  }
}

class WeatherModel extends WeatherEntity with EquatableMixin {
  WeatherModel({
    super.cnt,
    super.list,
    super.city,
  });
  factory WeatherModel.fromJson(Map<String, dynamic> json) {
    return WeatherModel(
        city: (json['city'] != null)
            ? WeatherModelCity.fromJson(json['city'])
            : null,
        cnt: json['cnt']?.toInt(),
        list: (json['list'] != null)
            ? WeatherEntityListModel.fromJson(json)
            : null);
  }
  Map<String, dynamic> toJson() => super.toJson();
}
